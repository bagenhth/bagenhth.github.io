<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Geek</title>
  <subtitle>geek&#39;s keepland</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://geek.com/"/>
  <updated>2017-08-22T13:56:51.167Z</updated>
  <id>http://geek.com/</id>
  
  <author>
    <name>Bruce Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JavaScript数组操作（遗漏点）</title>
    <link href="http://geek.com/2016/07/02/JavaScript%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C%EF%BC%88%E9%81%97%E6%BC%8F%E7%82%B9%EF%BC%89/"/>
    <id>http://geek.com/2016/07/02/JavaScript数组操作（遗漏点）/</id>
    <published>2016-07-02T00:45:47.000Z</published>
    <updated>2017-08-22T13:56:51.167Z</updated>
    
    <content type="html"><![CDATA[<p>　　普通一维数组的操作方法很简单，但是对于多维数组的操作呢？其实也很简单，遵循和一维数组相同的操作方法。<br>　　<a id="more"></a><br>　　以sort()和join()为例。我们知道，</p>
<ul>
<li><strong>sort()方法会调用每个数组项的toString()转型方法，然后比较得到的字符串，以确定如何排序</strong></li>
<li><strong>join()方法接收作为分隔符的字符串，然后返回包含所有数组项的字符串</strong></li>
</ul>
<h3 id="例-1"><a href="#例-1" class="headerlink" title="例 1"></a>例 1</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]];</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(c.sort());</div><div class="line"><span class="built_in">console</span>.log(c.join(<span class="string">'--'</span>));</div><div class="line"><span class="built_in">console</span>.log(c);</div><div class="line"></div><div class="line"><span class="comment">/* ======= 执行结果 =======</span></div><div class="line"><span class="comment"> * Array [ 1, Array[4], 2 ] </span></div><div class="line"><span class="comment"> * 1--1,2,3,4--2 </span></div><div class="line"><span class="comment"> * Array [ 1, Array[4], 2 ]</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>
<h3 id="例-2"><a href="#例-2" class="headerlink" title="例 2"></a>例 2</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> a = [[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>], [<span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>]];</div><div class="line"><span class="built_in">console</span>.log(a.sort());</div><div class="line"><span class="built_in">console</span>.log(a.join(<span class="string">"--"</span>));</div><div class="line"><span class="built_in">console</span>.log(a);</div><div class="line"></div><div class="line"><span class="comment">/* ======= 执行结果 =======</span></div><div class="line"><span class="comment"> * Array [ Array[4], Array[3] ] </span></div><div class="line"><span class="comment"> * 1,2,3,4--5,6,7 </span></div><div class="line"><span class="comment"> * Array [ Array[4], Array[3] ]</span></div><div class="line"><span class="comment"> */</span></div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　普通一维数组的操作方法很简单，但是对于多维数组的操作呢？其实也很简单，遵循和一维数组相同的操作方法。&lt;br&gt;
    
    </summary>
    
      <category term="js" scheme="http://geek.com/categories/js/"/>
    
    
      <category term="javascript" scheme="http://geek.com/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>常见交互效果实现—— 01</title>
    <link href="http://geek.com/2016/05/31/%E5%B8%B8%E8%A7%81%E4%BA%A4%E4%BA%92%E6%95%88%E6%9E%9C%E5%AE%9E%E7%8E%B0%E2%80%94%E2%80%94-01/"/>
    <id>http://geek.com/2016/05/31/常见交互效果实现——-01/</id>
    <published>2016-05-31T11:07:04.000Z</published>
    <updated>2017-08-22T13:56:48.727Z</updated>
    
    <content type="html"><![CDATA[<p>　　输入框外发光效果，常见的交互效果，能有效改表单交互性能。本例来源于Qt页面，官方效果如下：<br>　　<img src="http://7xr55t.com1.z0.glb.clouddn.com/ux-series-01/outlight.png" alt="outlight"><br>　　<a id="more"></a></p>
<p>　　注意这个外发光效果是一个动画，当输入框获得焦点时，输入框周围以动画效果出现外发光效果，失去焦点时移除效果。<br>　　实现如下：</p>
<p>　　###HTML<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"#"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- prompt username --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"username"</span>&gt;</span>Username<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></div><div class="line"></div><div class="line">    <span class="comment">&lt;!-- prompt password --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"password"</span>&gt;</span>Password<span class="tag">&lt;/<span class="name">label</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>　　###CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">* &#123;</div><div class="line">  <span class="attribute">font-size</span>: <span class="number">1em</span>;</div><div class="line"></div><div class="line">  <span class="attribute">box-sizing</span>: border-box;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#fff</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="selector-tag">form</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">600px</span>;</div><div class="line">  <span class="attribute">margin</span>: <span class="number">50px</span> auto <span class="number">0</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">form</span> <span class="selector-tag">label</span> &#123;</div><div class="line">  <span class="attribute">font</span>: <span class="number">1.2em</span>/<span class="number">1.4</span> Lucida Arial sans-serif;</div><div class="line"></div><div class="line">  <span class="attribute">display</span>: block;</div><div class="line"></div><div class="line">  <span class="attribute">margin</span>: <span class="number">0.7em</span> <span class="number">0</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span> &#123;</div><div class="line">  <span class="attribute">display</span>: inline-block;</div><div class="line"></div><div class="line">  <span class="attribute">width</span>: <span class="number">350px</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">35px</span>;</div><div class="line">  <span class="attribute">padding</span>: <span class="number">2px</span> <span class="number">10px</span> <span class="number">0</span>;</div><div class="line"></div><div class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out;</div><div class="line"></div><div class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#e3dede</span>;</div><div class="line">  <span class="attribute">border-radius</span>: <span class="number">3px</span>;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> transparent;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span> &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">0</span> <span class="number">3px</span> <span class="number">0</span> <span class="number">#80d4f6</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>　　最终效果如下图：<br>　　<img src="http://7xr55t.com1.z0.glb.clouddn.com/ux-series-01/outlight_custom.png" alt="outlight_custom"></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　输入框外发光效果，常见的交互效果，能有效改表单交互性能。本例来源于Qt页面，官方效果如下：&lt;br&gt;　　&lt;img src=&quot;http://7xr55t.com1.z0.glb.clouddn.com/ux-series-01/outlight.png&quot; alt=&quot;outlight&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="UX" scheme="http://geek.com/categories/UX/"/>
    
      <category term="Design" scheme="http://geek.com/categories/UX/Design/"/>
    
    
      <category term="UX" scheme="http://geek.com/tags/UX/"/>
    
      <category term="UI" scheme="http://geek.com/tags/UI/"/>
    
      <category term="Dssign" scheme="http://geek.com/tags/Dssign/"/>
    
  </entry>
  
  <entry>
    <title>CSS -- margin: auto;深入理解</title>
    <link href="http://geek.com/2016/05/19/CSS-margin-auto-%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://geek.com/2016/05/19/CSS-margin-auto-深入理解/</id>
    <published>2016-05-19T12:38:25.000Z</published>
    <updated>2017-08-22T13:56:55.264Z</updated>
    
    <content type="html"><![CDATA[<p>　　使用margin: auto;来水平居中一个块级元素是一个广为流传的技巧。但是你有没有思考过它为什么能实现水平居中呢？为了解它的原理，我们应该先了解margin: auto;的工作方式。此外，这篇文章还会掺杂一些margin: auto;可以做的事，例如有没有可能使用它来实现垂直居中……<br>　　<br><a id="more"></a></p>
<p>　　首先，auto的值到底是怎么确定的？<br>　　auto的值随其使用环境的不同而有不同的定义，在不同类型的元素，不同场合中应用会有不同的取值。但总的来说，取auto值意味着两种情况，占据所有可用空间或者取0。这两种取值将会<strong>为同一个元素定义不同的布局方式</strong>。
　　</p>
<h3 id="1-取”auto”值占据可用的空间"><a href="#1-取”auto”值占据可用的空间" class="headerlink" title="1.取”auto”值占据可用的空间"></a>1.取”auto”值占据可用的空间</h3><p>　　这是auto最常见的用法，通过给左外边距或右外边距赋auto值，他们会自动均分包含块水平方向的可用空间，这就形成了水平居中。（图和代码不上了，太常见了）。<br>　　注意，这种方法只对水平外边距有效（为什么后面会说到）。此外，<strong>浮动元素</strong>、<strong>行内元素</strong>、<strong>绝对定位和固定定位元素</strong>也不能通过此方法来水平居中。
　　</p>
<h3 id="2-取”auto”值来形成-“伪浮动”"><a href="#2-取”auto”值来形成-“伪浮动”" class="headerlink" title="2.取”auto”值来形成 “伪浮动”"></a>2.取”auto”值来形成 “伪浮动”</h3><p>　　对左外边距和右外边距同时取auto值会形成水平居中的效果，那你有没有想过只对它们中的一个取auto值会产生什么效果？<br>　　只对左、右外边距中的一个赋予auto值，会使得它占据该方向上的所有可用空间，即只给左外边距赋auto值时，元素会被向右推，就像设置了float: right;一样。
　　</p>
<h3 id="3-取”auto”值为0"><a href="#3-取”auto”值为0" class="headerlink" title="3.取”auto”值为0"></a>3.取”auto”值为0</h3><p>　　就像之前我们提到的，margin: auto;不能用来水平居中<strong>浮动元素</strong>、<strong>行内元素</strong>以及<strong>绝对定位元素</strong>，因为它们已经有了一个确定的布局 (<em>゜ー゜</em>)，因此对它们使用margin: auto;并没有作用。<br>　　此外，使用margin: auto;水平居中一个元素的话必须指定它的宽度width。<br>　　注意，对宽度应用auto的话，它margins值会被设置为0。因为块级元素的宽度通常取为它的包含块的宽度，也就是auto或100%时的情况（这种情况也就是width的默认值）。显然，此时它的取值为auto的margin将会被设置为0。
　　</p>
<h3 id="4-对垂直外边距应用auto会产生什么情况？"><a href="#4-对垂直外边距应用auto会产生什么情况？" class="headerlink" title="4.对垂直外边距应用auto会产生什么情况？"></a>4.对垂直外边距应用auto会产生什么情况？</h3><p>　　设置为auto的margin-top或margin-bottom将会取值为0。W3C规范写道：<em>If “margin-top” or “margin-bottom” is “auto”, their used value is 0</em>
　　</p>
<h3 id="5-使用绝对定位水平、垂直居中元素"><a href="#5-使用绝对定位水平、垂直居中元素" class="headerlink" title="5.使用绝对定位水平、垂直居中元素"></a>5.使用绝对定位水平、垂直居中元素</h3><p>　　还可以使用auto值来使一个绝对定位的元素水平、垂直居中。<br>　　首先看看对绝对定位元素使用margin: auto;会发生什么事，W3C规范指出：<br>　　<em>“If all three of “left”, “width”, and “right” are “auto”: First set any “auto” values for “margin-left” and “margin-right” to 0… “</em></p>
<p>　　<em>“If none of the three is “auto”: If both “margin-left” and “margin-right” are “auto”, solve the equation under the extra constraint that the two margins get equal values”</em>
　　</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　使用margin: auto;来水平居中一个块级元素是一个广为流传的技巧。但是你有没有思考过它为什么能实现水平居中呢？为了解它的原理，我们应该先了解margin: auto;的工作方式。此外，这篇文章还会掺杂一些margin: auto;可以做的事，例如有没有可能使用它来实现垂直居中……&lt;br&gt;　　&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="http://geek.com/categories/css/"/>
    
    
      <category term="css" scheme="http://geek.com/tags/css/"/>
    
      <category term="margin" scheme="http://geek.com/tags/margin/"/>
    
  </entry>
  
  <entry>
    <title>CSS线性渐变应用实例</title>
    <link href="http://geek.com/2016/05/17/CSS%E7%BA%BF%E6%80%A7%E6%B8%90%E5%8F%98%E5%BA%94%E7%94%A8%E5%AE%9E%E4%BE%8B/"/>
    <id>http://geek.com/2016/05/17/CSS线性渐变应用实例/</id>
    <published>2016-05-17T12:57:06.000Z</published>
    <updated>2017-08-22T13:57:00.426Z</updated>
    
    <content type="html"><![CDATA[<p>　　以下内容部分选取于《CSS Secrets》，部分来源于网上收集的案例。展示了CSS3线性渐变的一些应用实例。<br><a id="more"></a></p>
<hr>
<p><strong>1.</strong> 生成两端渐隐的分隔线<br>　　<img src="http://7xr55t.com1.z0.glb.clouddn.com/linear-gradient/divide-line.png" alt="divide-line"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"divide-line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.divide-line</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">  <span class="attribute">height</span>: <span class="number">1px</span>;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(</div><div class="line">    to right, </div><div class="line">    rgba(255, 255, 255, .1) <span class="number">0%</span>, </div><div class="line">    <span class="built_in">rgba</span>(240, 240, 240, .8) <span class="number">1%</span>, </div><div class="line">    <span class="number">#ddd</span> <span class="number">4%</span>, <span class="number">#ddd</span> <span class="number">96%</span>, </div><div class="line">    <span class="built_in">rgba</span>(240, 240, 240, .8) <span class="number">99%</span>, </div><div class="line">    <span class="built_in">rgba</span>(255, 255, 255, .1) <span class="number">100%</span></div><div class="line">  );</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>2.</strong> 生成柔和渐变<br>　　当两个颜色节点的位置不同时，它们中间的部分会自动进行柔和过渡。可以通过这个来构造柔和的过渡效果。<br>　　<img src="http://7xr55t.com1.z0.glb.clouddn.com/linear-gradient/smooth-gradient.png" alt="smooth-gradient"></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"smooth-gradient"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.smooth-gradient</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #fb3 20%, #58a 80%);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>3.</strong> 生成斑马线<br>　　当两个颜色节点的位置相同时，它们之间没有过渡效果。可以通过这点来构造斑马线（如果你需要的话:-)）<br>　　<img src="http://7xr55t.com1.z0.glb.clouddn.com/linear-gradient/zebra-line.png" alt="zebra-line"><br>　　<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"zebra-line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.zebra-line</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(to right, #fb3 50%, #58a 50%);</div><div class="line">  <span class="attribute">background-size</span>:  <span class="number">30px</span> <span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<p><strong>4.</strong> 生成斜向条纹<br>　将上一个例子的渐变方向改为45deg，就可以生成斜向条纹。<br>　 <img src="http://7xr55t.com1.z0.glb.clouddn.com/linear-gradient/bias-zebra-line.png" alt="bias-zebra-line"><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bias-zebra-line"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.bias-zebra-line</span> &#123;</div><div class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(45deg, #fb3 50%, #58a 50%);</div><div class="line">  <span class="attribute">background-size</span>:  <span class="number">30px</span> <span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;　　以下内容部分选取于《CSS Secrets》，部分来源于网上收集的案例。展示了CSS3线性渐变的一些应用实例。&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="http://geek.com/categories/css/"/>
    
    
      <category term="css" scheme="http://geek.com/tags/css/"/>
    
      <category term="linear-gradient" scheme="http://geek.com/tags/linear-gradient/"/>
    
  </entry>
  
  <entry>
    <title>双飞翼布局与圣杯布局的比较</title>
    <link href="http://geek.com/2016/03/25/%E5%8F%8C%E9%A3%9E%E7%BF%BC%E5%B8%83%E5%B1%80%E4%B8%8E%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80%E7%9A%84%E6%AF%94%E8%BE%83/"/>
    <id>http://geek.com/2016/03/25/双飞翼布局与圣杯布局的比较/</id>
    <published>2016-03-25T08:17:35.000Z</published>
    <updated>2017-08-22T13:56:46.646Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>圣杯布局和双飞翼布局都可以实现左右固定宽度，中间内容区宽度自适应。它们在实现时都应用了负外边距，然而两者在实现思路上略有不同。下面细致分析一下它们实现的共性与区别。</p>
<a id="more"></a>
<h2 id="共性"><a href="#共性" class="headerlink" title="共性"></a>共性</h2><p>负左外边距提升位置。（why?）</p>
<p><em>原理</em></p>
<ol>
<li>外边距形成两个相邻元素之间的间隔or空隙</li>
<li>对于浮动元素来说，缩小左外边距使两个元素之间间隔减小。</li>
<li>外边距减为0时两个元素贴在一起。</li>
<li>继续减小，形成负值。此时外边距表示两个元素之间远离程度。</li>
</ol>
<p>so. 双飞翼与圣杯布局都是中间内容宽度100%，接下来设置左栏margin: -100%; 因为浮动元素会一直浮动到触碰到它的前一个浮元素的右边界或包含框，所以左栏会向上移动使其左边界触碰到中间内容区的右边界，而此时的负左外边距使其一直移动到它的左边界远离中间内容区的右边界100%父元素宽度处（即左栏上移覆盖在中间内容区左侧），接下来调整其位置，使中间内容区被覆盖的部分显示出来即可。</p>
<p><img src="http://7xr55t.com1.z0.glb.clouddn.com/layout_different%2Fnative_margin_01.png" alt="负左外边距为0"></p>
<p><img src="http://7xr55t.com1.z0.glb.clouddn.com/layout_different%2Fnative_margin_02.png" alt="负左外边距为100%"></p>
<h2 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h2><h3 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h3><p>双飞翼布局为了解决中间部分左侧被上移的侧栏压住，为中间部分添加了内部标签，并设置 margin 或 padding 来产生空白，收缩内容，使被压住的部分显露出来。</p>
<h3 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h3><p>圣杯布局则通过定位来解决，它先在中间内容区通过padding留出左右侧栏宽度的空白，然后使左右侧栏相对定位，左侧栏上移后，设置其 right 为栏宽，使它继续向左移动到为其留出的空白上，右侧栏同理设置 margin-left 等于栏宽的一个负值使其紧跟左侧栏上移（由于侧栏 100% 的负左外边距，使其显示在中间内容区右侧），再为其设置 left 为栏宽就能显示在正确位置。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;圣杯布局和双飞翼布局都可以实现左右固定宽度，中间内容区宽度自适应。它们在实现时都应用了负外边距，然而两者在实现思路上略有不同。下面细致分析一下它们实现的共性与区别。&lt;/p&gt;
    
    </summary>
    
      <category term="css" scheme="http://geek.com/categories/css/"/>
    
    
      <category term="margin" scheme="http://geek.com/tags/margin/"/>
    
      <category term="layout" scheme="http://geek.com/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>圣杯布局 -- 负外边距应用</title>
    <link href="http://geek.com/2016/03/10/%E5%9C%A3%E6%9D%AF%E5%B8%83%E5%B1%80-%E8%B4%9F%E5%A4%96%E8%BE%B9%E8%B7%9D%E5%BA%94%E7%94%A8/"/>
    <id>http://geek.com/2016/03/10/圣杯布局-负外边距应用/</id>
    <published>2016-03-10T10:06:01.000Z</published>
    <updated>2017-08-22T13:56:39.307Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h3><p>「圣杯布局」—— 尽管这是一个很古老的话题了，而且网上早就有许多相关的文章，但作为前端入门和面试的必备知识之一，还是觉得有必要温故而知新一番。尤其是在拜读了「yuanzm」的博客 《我是如何同时拿到阿里和腾讯offer的》 文章后，更感到对于任何别人的知识至少都需要花点时间自己实践一下，了解一下它的原理甚至是历史，而不应盲目引用和浮于表面。谨以此文表示感谢~</p>
<p><img src="http://7xr55t.com1.z0.glb.clouddn.com/holly%20grail%2Fholy_grail.jpg" alt="圣杯布局"><br><a id="more"></a><br>圣杯的由来</p>
<p>圣杯布局是讨论「三栏液态布局」的实现，它最早出自于谁或许不得而查了，但最早的完美实现是来自于 Matthew Levine 于2006年在「A LIST APART」上写的一篇文章，它主要讲述了网页中关于最佳圣杯的实现方法。</p>
<p>所谓液态布局是相对固态布局而言的，固态布局就是固定值不变的布局，液态就好比在容器里到了一杯水，它可以随着容器宽度的变化而自适应宽度。</p>
<p>在这篇文章中，作者指出了当时的一些实现方式所存在的问题，如：必须按照源顺序（在 DOM 中表现为先写 Left，然后 Middle，最后，Right）等，它将可能导致代码不够灵活，尤其是从 DOM 的载入顺序上来说，中间的内容不能被首先加载。</p>
<p>因此他给出一个方案，它将：</p>
<ul>
<li>两边带有固定宽度中间可以流动（fluid）；</li>
<li>允许中间一栏最先出现；</li>
<li>允许任意一栏放在最上面；</li>
<li>仅需一个额外的 div 标签</li>
<li>仅需非常简单的 CSS，带上最少的兼容性补丁</li>
</ul>
<p>文中还提到了他的这个想法是基于「One True Layout」 和 「 Eric Meyer’s adaptation」两篇文章带来的灵感。</p>
<p>在这里你可以看到「圣杯布局」的最终效果： <a href="http://alistapart.com/d/holygrail/example_1.html" target="_blank" rel="external">http://alistapart.com/d/holygrail/example_1.html</a></p>
<h2 id="实现方式"><a href="#实现方式" class="headerlink" title="实现方式"></a>实现方式</h2><p>接下来就言归正传，说下具体的实现思路：</p>
<p>首先我们需要布局的 HTML 代码如下，作者在这里为了便于表达，对标签使用了非语义化的 id ，他建议在其他任何正式项目中尽量使用语义化的 id 。例如，我们需要实现的是左侧宽度为 200px，右侧宽度为 150px，中间是流动的布局。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>正如他先前提到的，只是加了一层额外的 div 它的 id 是 container 。它的 CSS 内容非常简单，具体代码如下：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">  <span class="attribute">min-width</span>: <span class="number">550px</span>;      <span class="comment">/* 2x LC width + RC width */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#container</span> &#123;</div><div class="line">  <span class="attribute">padding-left</span>: <span class="number">200px</span>;   <span class="comment">/* LC width */</span></div><div class="line">  <span class="attribute">padding-right</span>: <span class="number">150px</span>;  <span class="comment">/* RC width */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</div><div class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#center</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#e9e9e9</span>;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#left</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: red;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;          <span class="comment">/* LC width */</span></div><div class="line">  <span class="attribute">right</span>: <span class="number">200px</span>;          <span class="comment">/* LC width */</span></div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#right</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: blue;</div><div class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;          <span class="comment">/* RC width */</span></div><div class="line">  <span class="attribute">margin-right</span>: -<span class="number">150px</span>;  <span class="comment">/* RC width */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#footer</span> &#123;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#header</span>, </div><div class="line"><span class="selector-id">#footer</span> &#123;</div><div class="line">  <span class="attribute">background-color</span>: <span class="number">#c9c9c9</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/*** IE6 Fix ***/</span></div><div class="line">* <span class="selector-tag">html</span> <span class="selector-id">#left</span> &#123;</div><div class="line">  <span class="attribute">left</span>: <span class="number">150px</span>;           <span class="comment">/* RC width */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong><em>下面我们来分步观察它的实现逻辑：</em></strong></p>
<h3 id="第1步-建立框架"><a href="#第1步-建立框架" class="headerlink" title="第1步 建立框架"></a>第1步 建立框架</h3><p>先写 header, footer 和 container 三个 div<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>我们将 container 的内边距设置为左右两边各自的宽度。它看起来就像这样：</p>
<p><img src="http://7xr55t.com1.z0.glb.clouddn.com/holly%20grail%2Fdiagram_01.gif" alt="Step 1: Create the frame"></p>
<h3 id="第2步-加入三栏"><a href="#第2步-加入三栏" class="headerlink" title="第2步 加入三栏"></a>第2步 加入三栏</h3><p>此时我们有了基本框架，可以把三栏塞进去了。<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span>#header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"center"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"left"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"right"</span> <span class="attr">class</span>=<span class="string">"column"</span>&gt;</span>#right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span>#footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure></p>
<p>接着我们给每一栏配上合适的宽度，并将它们设为浮动。同时我们需要清除 footer 的上下环境，以免遭跟上面三栏一起浮动。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span> <span class="selector-class">.column</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#center</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#left</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;  <span class="comment">/* LC width */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#right</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;  <span class="comment">/* RC width */</span></div><div class="line">&#125;</div><div class="line"><span class="selector-id">#footer</span> &#123;</div><div class="line">  <span class="attribute">clear</span>: both;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>注意这里中间一栏的 100% 宽是基于它的父容器 container 的宽度而言的，由于 container 设置了内边距，因此中间栏看起来就处在了网页的中间，但左右两栏由于排在中间栏的后面，且因为空间不够被挤到了中间栏的下面，如下图所示：</p>
<p><img src="http://7xr55t.com1.z0.glb.clouddn.com/holly%20grail%2Fdiagram_02.gif" alt="Step 2: Add the columns"></p>
<h3 id="第3步-把左侧栏放上去"><a href="#第3步-把左侧栏放上去" class="headerlink" title="第3步 把左侧栏放上去"></a>第3步 把左侧栏放上去</h3><p>中间栏已经就位，剩下的事情就是把左右两栏放上去了，接下来我们先放左侧栏。</p>
<p>为了详述过程，这里将分为两个小步骤。首先，我们先将它的外边距设置为 -100%，这样一来，由于浮动的关系，左侧栏就能上位，与中间栏交叠在一起，并占据了左边。而右侧栏由于左侧栏的上位，自动向前浮动到了原来左侧栏的位置。</p>
<p><img src="http://7xr55t.com1.z0.glb.clouddn.com/holly%20grail%2Fdiagram_03.gif" alt="Step 3: Pull the left column into place—halfway there"></p>
<p>接着我们要用到相对定位属性（relative），并设置一个与 左侧栏 等宽的偏移量：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#container</span> <span class="selector-class">.columns</span> &#123;</div><div class="line">  <span class="attribute">float</span>: left;</div><div class="line">  <span class="attribute">position</span>: relative;</div><div class="line">&#125;</div><div class="line"><span class="selector-id">#left</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;        <span class="comment">/* LC width */</span></div><div class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;  </div><div class="line">  <span class="attribute">right</span>: <span class="number">200px</span>;        <span class="comment">/* LC width */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>可以看到，它设置的 right 属性就是相对于 container 的右边线向左偏移 200px，如此一来，它就完美地跑到了 container 左内边距的位置，也就是我们希望它呆的地方，如下图所示：</p>
<p><img src="http://7xr55t.com1.z0.glb.clouddn.com/holly%20grail%2Fdiagram_04.gif" alt="Step 3: Left column pulled into place"></p>
<h3 id="第4步-把右侧栏放上去"><a href="#第4步-把右侧栏放上去" class="headerlink" title="第4步 把右侧栏放上去"></a>第4步 把右侧栏放上去</h3><p>最后，我们需要把右侧栏放上去，此时只需利用上面的原理把他放到 container 的右外边距的位置即可，我们需要再一次设置一个负外边距的值，它等于 右侧栏 的宽度：<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="selector-id">#right</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;          <span class="comment">/* RC width */</span></div><div class="line">  <span class="attribute">margin-right</span>: -<span class="number">150px</span>;  <span class="comment">/* RC width */</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>至此，所有的栏目都就位了~</p>
<p><img src="http://7xr55t.com1.z0.glb.clouddn.com/holly%20grail%2Fdiagram_05.gif" alt="Step 4: Pull the right column into place"></p>
<p>本文转载于segmentfault – <a href="https://segmentfault.com/a/1190000004524159" target="_blank" rel="external">关于圣杯布局 </a> by <strong>DotHide</strong><br>英文原文参见 – <a href="http://alistapart.com/article/holygrail" target="_blank" rel="external">In Search of the Holy Grail</a> by <strong>Matthew Levine</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;引言&quot;&gt;&lt;a href=&quot;#引言&quot; class=&quot;headerlink&quot; title=&quot;引言&quot;&gt;&lt;/a&gt;引言&lt;/h3&gt;&lt;p&gt;「圣杯布局」—— 尽管这是一个很古老的话题了，而且网上早就有许多相关的文章，但作为前端入门和面试的必备知识之一，还是觉得有必要温故而知新一番。尤其是在拜读了「yuanzm」的博客 《我是如何同时拿到阿里和腾讯offer的》 文章后，更感到对于任何别人的知识至少都需要花点时间自己实践一下，了解一下它的原理甚至是历史，而不应盲目引用和浮于表面。谨以此文表示感谢~&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://7xr55t.com1.z0.glb.clouddn.com/holly%20grail%2Fholy_grail.jpg&quot; alt=&quot;圣杯布局&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="css" scheme="http://geek.com/categories/css/"/>
    
    
      <category term="margin" scheme="http://geek.com/tags/margin/"/>
    
      <category term="layout" scheme="http://geek.com/tags/layout/"/>
    
  </entry>
  
  <entry>
    <title>Sublime Text 3常用插件安装与配置</title>
    <link href="http://geek.com/2016/03/09/Sublime-Text-3%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AE/"/>
    <id>http://geek.com/2016/03/09/Sublime-Text-3常用插件安装与配置/</id>
    <published>2016-03-09T00:31:44.000Z</published>
    <updated>2017-08-22T13:56:43.574Z</updated>
    
    <content type="html"><![CDATA[<p>记录st3一些常用插件的安装与配置<br><a id="more"></a></p>
<h2 id="sublime-text-3-配置"><a href="#sublime-text-3-配置" class="headerlink" title="sublime text 3 配置"></a>sublime text 3 配置</h2><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">"color_scheme": "Packages/Theme - Afterglow/Afterglow.tmTheme",</div><div class="line">"draw_white_space": "all",</div><div class="line">"ensure_newline_at_eof_on_save": true,</div><div class="line">"font_face": "CamingoCode",</div><div class="line">"font_size": 14,</div><div class="line">"ignored_packages":</div><div class="line">[</div><div class="line"><span class="string">"Vintage"</span></div><div class="line">],</div><div class="line">"shift_tab_unindent": true,</div><div class="line">"show_encoding": false,</div><div class="line">"tab_size": 2,</div><div class="line">"theme": "Afterglow.sublime-theme",                     // 替换为color_scheme对应的主题</div><div class="line">"translate_tabs_to_spaces": true,</div><div class="line">"trim_trailing_white_space_on_save": true</div></pre></td></tr></table></figure>
<h2 id="package-control-安装与配置"><a href="#package-control-安装与配置" class="headerlink" title="package control 安装与配置"></a>package control 安装与配置</h2><p>使用goagent或xx-net代理时，可添加如下配置，或者也可以更改chanels源，详情请移步</p>
<p> <a href="http://www.cnblogs.com/52cik/p/Package-Control.html" target="_blank" rel="external">Sublime Text 之 Package Control 镜像</a>   </p>
<p><a href="http://rabbit52.com/2013/devel/goagent-proxy-sublime-text-2-package-control" target="_blank" rel="external">使用GoAgent代理Sublime Text2的Package Control</a><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">"certs":                               // 证书</div><div class="line">&#123;</div><div class="line"><span class="attr">"*"</span>:</div><div class="line">[</div><div class="line">  <span class="string">"goagent"</span>,</div><div class="line">  <span class="string">"D:/Program Files/XX-Net-master/data/gae_proxy/CA.crt"</span></div><div class="line">]</div><div class="line">&#125;,</div><div class="line">"channels":</div><div class="line">[</div><div class="line"><span class="string">"https://dn-52cik.qbox.me/channel_v3.json"</span></div><div class="line">],</div><div class="line">"http_proxy": "127.0.0.1:8087",        // http_proxy，代理端口，这是我的设置 </div><div class="line">"https_proxy": "127.0.0.1:8087"        // https_proxy，代理端口，这是我的设置</div></pre></td></tr></table></figure></p>
<p>以下安装略去……</p>
<h2 id="SublimeCodeIntel"><a href="#SublimeCodeIntel" class="headerlink" title="SublimeCodeIntel"></a>SublimeCodeIntel</h2><h2 id="Color-Highlighter"><a href="#Color-Highlighter" class="headerlink" title="Color Highlighter"></a>Color Highlighter</h2><h2 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h2><h2 id="Sidebar-Enhancement"><a href="#Sidebar-Enhancement" class="headerlink" title="Sidebar Enhancement"></a>Sidebar Enhancement</h2>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录st3一些常用插件的安装与配置&lt;br&gt;
    
    </summary>
    
      <category term="editor" scheme="http://geek.com/categories/editor/"/>
    
    
      <category term="sublime" scheme="http://geek.com/tags/sublime/"/>
    
      <category term="proxy" scheme="http://geek.com/tags/proxy/"/>
    
  </entry>
  
</feed>
